function [y1] = myNeuralNetworkFunction(x1)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Auto-generated by MATLAB, 26-Oct-2020 15:01:23.
%
% [y1] = myNeuralNetworkFunction(x1) takes these arguments:
%   x = 4xQ matrix, input #1
% and returns:
%   y = 2xQ matrix, output #1
% where Q is the number of samples.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [-0.000554759129503578;-4.64211194251156e-05;-0.000626379423585945;-4.91661239444643e-06];
x1_step1.gain = [2017.38535179491;337291.15194976;1325.2867615964;177643.214763595];
x1_step1.ymin = -1;

% Layer 1
b1 = [2.5671454539303071307;1.1539774420275126232;-1.1499398928179391799;0.12908128646119351735;-0.16641805423028305233;0.20713298918366057633;-1.0670472372093362523;-1.28821401974549965;-1.1591939268156452592;-3.4947583166360467466];
IW1_1 = [-1.0393563116827344572 1.5690123721870159468 -1.5582077968259444578 -0.51793877142138022851;-0.82951841281250482396 -0.34938996123674731509 -0.19631434348468054796 -0.11058351141129717232;-0.10501055754953501908 -0.48782592989582351795 -0.23236086269800201864 -0.5798296843073960094;3.4686267693371051202 -0.69653339298115124478 0.65381386826878007401 3.3817572779775888492;0.028904749147353379912 -0.76829587333314686148 0.90841221815356443248 0.77525481437871168744;-1.532338220190384348 -1.4558274884010187211 1.3269802547111440028 -1.7943496297916039506;-0.3002535981468303361 0.50993870221850068347 -0.20063664614027018618 0.61814368506972161565;-0.10795135364363614427 0.39297613925730523476 -0.87707382833483504836 0.80405228958317775945;-1.2592966547547836953 1.5997454588751751636 0.15038153447745308822 0.87520207988838638613;-0.87879977386418262064 1.3430468807135664822 0.32448432563977852583 0.11548463748278688101];

% Layer 2
b2 = [0.20368349626949441844;0.41974145450900168797];
LW2_1 = [0.84350821250293883669 -0.39371735685938979987 0.68511355095446668795 -4.6631346111550229239 0.57845996868933746704 1.9662241954730357296 0.37731691359994062873 -0.54742163338449090215 -0.0069981744764358016359 -0.0064785038519482151392;-1.3797730728537747069 0.48158800247508770642 0.060946574667990617569 -0.90609402181443698954 -0.47940136930966448237 -2.0952826418267913589 -1.1999436022550737935 -0.24954120341951158135 0.011034676041258911425 0.56574560464354062272];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = [30.08990143121;6.77237739665269];
y1_step1.xoffset = [-0.0384964290874243;-4.97640944999299];

% ===== SIMULATION ========

% Dimensions
Q = size(x1,2); % samples

% Input 1
xp1 = mapminmax_apply(x1,x1_step1);

% Layer 1
a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*xp1);

% Layer 2
a2 = repmat(b2,1,Q) + LW2_1*a1;

% Output 1
y1 = mapminmax_reverse(a2,y1_step1);
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
